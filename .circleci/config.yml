version: 2.1

#environment:


commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      workflow_id:
        type: string  
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            echo "Destroying environment: << parameters.workflow_id >> "
            aws cloudformation delete-stack --stack-name "capstone-backend--<< parameters.workflow_id >>"

orbs:
  slack: circleci/slack@4.1

jobs:
  build-images:
    machine: true           #https://circleci.com/docs/2.0/building-docker-images/
    working_directory: ~/repo
    steps:
      - checkout
      - run:
          name: Install Dependencies
          command: |
            sudo apt update -y
            sudo apt install -y vim
      - run:
          name: Build Images
          command: |
            cd ~/repo
            docker build -f apache.Dockerfile --tag hello_app .
      - run: 
          name: Tag images
          command: |
            echo "$DOCKER_PASSWORD" > docker_password.txt
            cat docker_password.txt | docker login --username $DOCKER_ACCOUNT --password-stdin
            docker tag hello_app:latest $DOCKER_ACCOUNT/hello_app
      - run: 
          name: Push images
          command: |
            docker push cbath/hello_app

  test-images:
    machine: true 
    working_directory: ~/repo
    steps:
      - checkout
      - run:
          name: Install Dependencies
          command: |
            sudo wget -O /bin/hadolint https://github.com/hadolint/hadolint/releases/download/v1.16.3/hadolint-Linux-x86_64
            sudo chmod +x /bin/hadolint
      - run:
          name: Lint Images
          command: |
            cd /home/circleci/repo
            hadolint apache.Dockerfile
      - run:
          name: Download Images
          command: |
            echo "$DOCKER_PASSWORD" > docker_password.txt
            cat docker_password.txt | docker login --username $DOCKER_ACCOUNT --password-stdin
            docker pull $DOCKER_ACCOUNT/hello_app
      - run:
          name: Test Images
          command: |
            docker container run -d -p 8080:80  $DOCKER_ACCOUNT/hello_app
            curl localhost:8080
      - slack/notify:
          channel: 'udacity-ci-cd'
          event: fail
          template: basic_fail_1
      
  create-infrastructure:
    working_directory: ~/repo
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          command: yum install -y tar gzip
      - run:
          name: Create Backend Infrastructure
          command: |
              cd ~/repo/deploy/cloudformation/servers
              aws cloudformation deploy \
              --template-file servers.yml \
              --stack-name "capstone-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  \
              --tags project=capstone
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            BACKEND_IP=$(aws ec2 describe-instances --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" --query "Reservations[*].Instances[*].{public_ip:PublicIpAddress}" --output text)
            echo $BACKEND_IP >> ~/inventory.txt
            echo $BACKEND_IP
      # Save workspace for subsequent jobs (i.e. test)
      - persist_to_workspace:
          root: ~/
          paths:
            - inventory.txt
 
  configure-infrastructure:
    working_directory: ~/repo
    docker:
      - image: centos:centos8
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            yum install -y epel-release
            yum install -y tar gzip ansible
      - attach_workspace:
          name: Attach Workspace
          at: ~/
      - add_ssh_keys:
          name: Add ssh keys with fingerprint
          fingerprints:
            - "e8:92:03:fd:e6:2d:df:65:71:97:7b:5e:fc:ac:25:91"
      - run:
          name: Configure server
          command: |
             cd ~/repo/deploy/ansible
             cp ~/inventory.txt .
             echo "$DOCKER_PASSWORD" > docker_password.txt
             cat inventory.txt
             ansible-playbook -i inventory.txt configure-server.yml
            # ansible-playbook --private-key secrets/udacity.pem -i deploy/ansible/inventory.txt deploy/ansible/configure-server.yml
      # Here's where you will add some code to rollback on failure   
      #- destroy-environment:
      #      workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"

  cloudfront-update:
    working_directory: ~/repo
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Update cloudfront distribution
          command: |
            cd ~/repo/deploy/cloudformation/cloudfront
            aws cloudformation deploy \
            --template-file cloudfront.yml \
            --stack-name CapstoneCloudFront \
            --parameter-overrides WorkflowID="${CIRCLE_WORKFLOW_ID:0:7}" \
            --tags project=udapeople
               
workflows:
  default:
    jobs:
      - build-images
      - test-images:
          requires: [build-images]
          context: slack-secrets
      #- scan-images:
      #    requires: [build-images]
      - create-infrastructure:
          requires: [test-images]
          filters:
            branches:
              only: main
      - configure-infrastructure:
          requires: [create-infrastructure]

          